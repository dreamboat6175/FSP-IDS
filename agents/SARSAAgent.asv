%% SARSAAgent.m - SARSA智能体实现
classdef SARSAAgent < RLAgent
    properties
        Q_table
        visit_count
        use_softmax
        update_count
        lr_scheduler
    end
    
    methods
        function obj = SARSAAgent(name, agent_type, config, state_dim, action_dim)
            obj@RLAgent(name, agent_type, config, state_dim, action_dim);
            
            % 改进的Q表初始化 - 使用乐观初始化
            initial_value = 5.0; % 提高初始值
            noise_level = 0.5;   % 增加噪声
            obj.Q_table = ones(state_dim, action_dim) * initial_value + ...
                          randn(state_dim, action_dim) * noise_level;
            obj.visit_count = zeros(state_dim, action_dim);
            
            % 默认使用epsilon-greedy策略，更稳定
            obj.use_softmax = false;
            % 初始化学习率调度器
            obj.lr_scheduler = struct();
            if isfield(config, 'learning_rate')
                obj.lr_scheduler.initial_lr = config.learning_rate;
                obj.lr_scheduler.current_lr = config.learning_rate;
            else
                obj.lr_scheduler.initial_lr = 0.15;
                obj.lr_scheduler.current_lr = 0.15;
            end
            obj.lr_scheduler.min_lr = 0.001;
            obj.lr_scheduler.decay_steps = 1000;
            obj.lr_scheduler.step_count = 0;
            obj.lr_scheduler.decay_rate = 0.99;
            
            % 初始化更新计数器（如果还没有）
            if ~isprop(obj, 'update_count') && ~isfield(obj, 'update_count')
                obj.update_count = 0;
            end
        end

        function action_vec = selectAction(obj, state_vec)
            % SARSA智能体的动作选择
            
            % 健壮性检查
            if isempty(state_vec)
                warning('SARSAAgent.selectAction: state_vec is empty, auto-fixing...');
                state_vec = ones(1, obj.state_dim);
            end
            state_vec = reshape(state_vec, 1, []);
            
            % 获取状态索引
            state_idx = obj.encodeState(mean(state_vec));
            
            % 获取Q值
            q_values = obj.Q_table(state_idx, :);
            
            % 确保Q值有效
            if any(isnan(q_values)) || any(isinf(q_values))
                q_values = ones(size(q_values)) * 1.0;
            end
            
            % === SARSA特有的动作选择策略 ===
            if obj.use_softmax
                % Softmax选择
                temperature = max(0.1, obj.temperature);
                exp_values = exp(q_values / temperature);
                probabilities = exp_values / sum(exp_values);
                action_vec = probabilities;
                
                % SARSA特色：基于当前策略的噪声
                if rand() < 0.2
                    policy_noise = randn(1, obj.action_dim) * 0.05;
                    action_vec = action_vec + policy_noise;
                end
                
            else
                % Epsilon-greedy with SARSA twist
                if rand() < obj.epsilon
                    % SARSA探索：倾向于平衡分配
                    action_vec = ones(1, obj.action_dim) + rand(1, obj.action_dim) * 0.5;
                else
                    % 基于Q值的Boltzmann分布
                    beta = 2.0;  % 温度参数
                    weights = exp(beta * (q_values - max(q_values)));
                    action_vec = weights / sum(weights);
                    
                    % 添加策略噪声
                    noise = randn(1, obj.action_dim) * 0.08;
                    action_vec = action_vec + noise;
                end
            end
            
            % 确保非负并归一化
            action_vec = max(0, action_vec);
            if sum(action_vec) > 0
                action_vec = action_vec / sum(action_vec);
            else
                action_vec = ones(1, obj.action_dim) / obj.action_dim;
            end
            
            % 记录动作
            [~, dominant_action] = max(action_vec);
            % obj.recordAction(state_idx, dominant_action);
        end


        function update(obj, state_vec, action_vec, reward, next_state_vec, next_action_vec)
            % Robust shape check
            if isempty(action_vec)
                warning('SARSAAgent.update: action_vec is empty, auto-fixing...');
                action_vec = ones(1, 5);
            end
            action_vec = reshape(action_vec, 1, []);
            if isempty(state_vec)
                warning('SARSAAgent.update: state_vec is empty, auto-fixing...');
                state_vec = ones(1, obj.state_dim);
            end
            state_vec = reshape(state_vec, 1, []);
            if ~isempty(next_state_vec)
                next_state_vec = reshape(next_state_vec, 1, []);
            end
            if ~isempty(next_action_vec)
                next_action_vec = reshape(next_action_vec, 1, []);
            end
            
            % 获取状态索引
            state_idx = obj.encodeState(mean(state_vec));
            next_state_idx = obj.encodeState(mean(next_state_vec));
            
            % 将站点级动作转换为Q表索引
            % action_vec包含每个站点的资源类型选择 (1-5)
            % 需要转换为Q表中的对应索引
            n_stations = length(action_vec);
            n_resource_types = obj.action_dim / n_stations;
            
            % 计算Q表动作索引 - 使用第一个站点的动作作为主要索引
            % 这是一个简化的方法，假设主要关注第一个站点的动作
            primary_station = 1;
            resource_type = action_vec(primary_station);
            resource_type = max(1, min(n_resource_types, round(resource_type)));
            q_action_idx = (primary_station - 1) * n_resource_types + resource_type;
            
            % 确保Q表索引有效
            q_action_idx = max(1, min(obj.action_dim, q_action_idx));
            
            % 处理下一个动作
            if isempty(next_action_vec)
                % 如果没有提供下一个动作，使用当前策略选择
                next_q_values = obj.Q_table(next_state_idx, :);
                next_action_vec = obj.convertToStationActions(next_q_values, n_stations);
            end
            
            % 计算下一个动作的Q表索引
            next_resource_type = next_action_vec(primary_station);
            next_resource_type = max(1, min(n_resource_types, round(next_resource_type)));
            next_q_action_idx = (primary_station - 1) * n_resource_types + next_resource_type;
            next_q_action_idx = max(1, min(obj.action_dim, next_q_action_idx));
            
            % 计算TD误差
            current_q = obj.Q_table(state_idx, q_action_idx);
            next_q = obj.Q_table(next_state_idx, next_q_action_idx);
            td_error = reward + obj.discount_factor * next_q - current_q;
            
            % 更新Q值
            obj.Q_table(state_idx, q_action_idx) = current_q + obj.learning_rate * td_error;
            obj.visit_count(state_idx, q_action_idx) = obj.visit_count(state_idx, q_action_idx) + 1;
            
            % obj.recordReward(reward);
            obj.update_count = obj.update_count + 1;
        end
        % 在 agents/QLearningAgent.m 文件中，在现有的 update() 方法之后添加以下方法：
% 
% 现有代码结构应该是：
%     methods
%         function obj = QLearningAgent(...)  % 构造函数
%         function action = selectAction(...)  % 选择动作
%         function update(...)                % 更新方法
%         
%         % === 在这里添加以下四个新方法 ===
        
        function stats = getStatistics(obj)
            % 获取智能体统计信息
            stats = struct();
            
            % 基本统计
            stats.name = obj.name;
            stats.agent_type = obj.agent_type;
            
            % 检查属性是否存在
            if isprop(obj, 'update_count') || isfield(obj, 'update_count')
                stats.update_count = obj.update_count;
            else
                stats.update_count = 0;
            end
            
            if isprop(obj, 'total_reward') || isfield(obj, 'total_reward')
                stats.total_reward = obj.total_reward;
            else
                stats.total_reward = 0;
            end
            
            % Q表统计
            if ~isempty(obj.Q_table)
                stats.avg_q_value = mean(obj.Q_table(:));
                stats.max_q_value = max(obj.Q_table(:));
                stats.min_q_value = min(obj.Q_table(:));
                stats.q_value_std = std(obj.Q_table(:));
            else
                stats.avg_q_value = 0;
                stats.max_q_value = 0;
                stats.min_q_value = 0;
                stats.q_value_std = 0;
            end
            
            % 学习参数
            if isfield(obj.lr_scheduler, 'current_lr')
                stats.current_learning_rate = obj.lr_scheduler.current_lr;
            elseif isprop(obj, 'learning_rate') || isfield(obj, 'learning_rate')
                stats.current_learning_rate = obj.learning_rate;
            else
                stats.current_learning_rate = 0.1;
            end
            
            if isprop(obj, 'epsilon') || isfield(obj, 'epsilon')
                stats.current_epsilon = obj.epsilon;
            else
                stats.current_epsilon = 0.1;
            end
            
            % 探索统计
            if ~isempty(obj.visit_count)
                total_visits = sum(obj.visit_count(:));
                stats.total_state_visits = total_visits;
                stats.explored_states = sum(sum(obj.visit_count > 0));
                stats.exploration_ratio = stats.explored_states / numel(obj.visit_count);
            else
                stats.total_state_visits = 0;
                stats.explored_states = 0;
                stats.exploration_ratio = 0;
            end
            
            % 性能统计
            if isprop(obj, 'episode_rewards') || isfield(obj, 'episode_rewards')
                if ~isempty(obj.episode_rewards)
                    stats.avg_episode_reward = mean(obj.episode_rewards);
                    stats.best_episode_reward = max(obj.episode_rewards);
                    stats.worst_episode_reward = min(obj.episode_rewards);
                    stats.total_episodes = length(obj.episode_rewards);
                else
                    stats.avg_episode_reward = 0;
                    stats.best_episode_reward = 0;
                    stats.worst_episode_reward = 0;
                    stats.total_episodes = 0;
                end
            else
                stats.avg_episode_reward = 0;
                stats.best_episode_reward = 0;
                stats.worst_episode_reward = 0;
                stats.total_episodes = 0;
            end
        end
        
        function policy = getPolicy(obj)
            % 获取当前策略
            
            if isempty(obj.Q_table) || size(obj.Q_table, 1) == 0
                % 如果Q表为空，返回均匀策略
                policy = ones(1, obj.action_dim) / obj.action_dim;
                return;
            end
            
            % 基于平均Q值的策略
            avg_q_values = mean(obj.Q_table, 1);
            
            if all(avg_q_values == 0) || all(isnan(avg_q_values))
                % 如果所有Q值都是0或NaN，返回均匀策略
                policy = ones(1, obj.action_dim) / obj.action_dim;
            else
                % 使用softmax转换为概率分布
                temperature = 1.0;
                if isprop(obj, 'temperature') || isfield(obj, 'temperature')
                    temperature = obj.temperature;
                end
                
                if temperature > 0
                    scaled_q = avg_q_values / temperature;
                    % 数值稳定的softmax
                    exp_q = exp(scaled_q - max(scaled_q));
                    policy = exp_q / sum(exp_q);
                else
                    % 贪婪策略
                    policy = zeros(1, obj.action_dim);
                    [~, best_action] = max(avg_q_values);
                    policy(best_action) = 1;
                end
            end
            
            % 确保policy是有效的概率分布
            if any(isnan(policy)) || any(isinf(policy)) || sum(policy) == 0
                policy = ones(1, obj.action_dim) / obj.action_dim;
            else
                policy = policy / sum(policy); % 归一化
            end
        end
        
        function strategy = getStrategy(obj)
            % 获取当前策略分布（与getPolicy相同）
            strategy = obj.getPolicy();
        end
        
        function resetEpisode(obj)
            % 重置episode相关的状态
            
            % 更新探索率
            if isprop(obj, 'epsilon') || isfield(obj, 'epsilon')
                if isprop(obj, 'epsilon_min') || isfield(obj, 'epsilon_min')
                    epsilon_min = obj.epsilon_min;
                else
                    epsilon_min = 0.01;
                end
                
                if isprop(obj, 'epsilon_decay') || isfield(obj, 'epsilon_decay')
                    epsilon_decay = obj.epsilon_decay;
                else
                    epsilon_decay = 0.995;
                end
                
                if obj.epsilon > epsilon_min
                    obj.epsilon = obj.epsilon * epsilon_decay;
                end
            end
            
            % 更新温度参数（如果存在）
            if isprop(obj, 'temperature') || isfield(obj, 'temperature')
                if isprop(obj, 'temperature_decay') || isfield(obj, 'temperature_decay')
                    temperature_decay = obj.temperature_decay;
                    if obj.temperature > 0.1
                        obj.temperature = obj.temperature * temperature_decay;
                    end
                end
            end
        end
        
        function save(obj, filename)
            if nargin < 2
                filename = sprintf('models/sarsa_%s_%s.mat', ...
                                 obj.agent_type, datestr(now, 'yyyymmdd_HHMMSS'));
            end
            [filepath, ~, ~] = fileparts(filename);
            if ~exist(filepath, 'dir')
                mkdir(filepath);
            end
            save_data.Q_table = obj.Q_table;
            save_data.visit_count = obj.visit_count;
            save_data.name = obj.name;
            save_data.agent_type = obj.agent_type;
            save_data.update_count = obj.update_count;
            save(filename, 'save_data');
        end
        
        function load(obj, filename)
            if exist(filename, 'file')
                load_data = load(filename);
                save_data = load_data.save_data;
                obj.Q_table = save_data.Q_table;
                obj.visit_count = save_data.visit_count;
                obj.name = save_data.name;
                obj.update_count = save_data.update_count;
            else
                error('模型文件不存在: %s', filename);
            end
        end
         function prob = softmax(x)
            % 计算softmax概率分布
            exp_x = exp(x - max(x));  % 数值稳定性
            prob = exp_x / sum(exp_x);
         end

        function action_vec = convertToStationActions(obj, q_values, n_stations)
            % 将Q值向量转换为每个站点的资源类型动作
            n_resource_types = obj.action_dim / n_stations;
            action_vec = zeros(1, n_stations);
            for s = 1:n_stations
                idx_start = (s-1)*n_resource_types + 1;
                idx_end = s*n_resource_types;
                [~, best_resource] = max(q_values(idx_start:idx_end));
                action_vec(s) = best_resource;
            end
        end

        function state_idx = encodeState(obj, state)
            % 将状态向量编码为索引（与QLearningAgent一致）
            if isempty(state) || ~isnumeric(state)
                state_idx = 1;
                return;
            end
            state = double(state(:));
            state(isnan(state)) = 0;
            state(isinf(state)) = 0;
            % 简单哈希
            state_idx = mod(sum(state .* (1:numel(state))), obj.state_dim) + 1;
            state_idx = max(1, min(obj.state_dim, round(state_idx))); % 保证索引有效
        end
    end
end
